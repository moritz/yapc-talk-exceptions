title: Exceptional Perl 6
subtitle: Exceptions and Error Reporting
author: Moritz Lenz <moritz@faui2k3.org>
affiliation: #perl6
-----------

= Examples of Error Reporting (1)
:text

    $ route add default gw 192.168.1.1
    SIOCADDRT: No such process

= What's wrong with that?

 * Usage of obscure acronyms
 * What have processes to do with routes?
 * No explanation what went wrong
 * No explanation why something went wrong
 * No explanation which parameter is to blame
 * Google for the error: several possible reasons

= Examples of Error Reporting (2)
:text

    perl -e 'if (time() { }'
    syntax error at -e line 1, near ") {"
    Execution of -e aborted due to compilation errors.

= Better

 * Tells you which level the error is on (syntax)
 * Tells you where the error is
 * Tells you that the error is fatal

= But not yet awesome

  * Does not tell you what the problem is
  * Does not tell you how to fix it

= We can do better
:text

   $ perl6 -e 'sub elephant { }; elegant();'
    ===SORRY!=== Error while compiling -e
    Undeclared routine:
        elegant used at line 1. Did you mean '&elephant'?

= Useful features

  * undeclared routine caught at compile time
  * suggestions for misspelled routines
  * batching (several missing routines reported in one error message)

= Handling Errors in Perl 6
:perl6

    sub might-die {
        die "Bad luck" if Bool.pick
    }
    try { might-die() }
    if $! {
        say "Good luck";
    }
    else {
        say "Bad luck";
    }

= Simplification

*  `try might-die` (without braces)
* Unholy aliance between `eval`ing and exception catching is gone.

= What's in $! anyway?
:text

    $ perl6 -e 'try die "gone wrong"; say $!.perl'
    X::AdHoc.new(payload => "gone wrong")
    $ perl6 -e 'say X::AdHoc.^mro'
    (X::AdHoc) (Exception) (Any) (Mu)

= What's in $! anyway?

  * Always of class Exception
  * If the argument to `die` isn't of type Exception, wrapped in `X::AdHoc`
  * Has methods `$!.backtrace`, `.throw`, `.message`

= Some built-in exception types
:text

$ perl6 -e 'try chmod 0o777, "/"; say $!.message; say $!.perl'
Failed to set the mode of '/' to '0o777':
    chmod failed: Operation not permitted
X::IO::Chmod.new(path => "/", mode => 511,
    os-error => "chmod failed: Operation not permitted")

= Some built-in exception types
:text

$ perl6 -e 'try :16("OH"); say $!.message; say $!.perl'
Cannot convert string to number: base-16 number must ⏎
    begin with valid digits or '.' in ':16<⏏OH>' (indicated by ⏏)
X::Str::Numeric.new(source => ":16<OH>", pos => 4, ⏎
    reason => "base-16 number must begin with valid digits or '.'")

= Your own exception classes
:perl6

    class X::Disco::TooYoung {
        has $.age;
        has $.min-age;
        method message {
            "With $.age years you are too young"
            ~  " (minimal age $.min-age)";
        }
    }

= Use your own exception classes
:perl6

    sub enter-disco($age) {
        if $age < 18 {
            die X::Disco::TooYoung.new(
                :$age,
                min-age => 18,
            );
        }
        say "Entering disco";
    }

= Catch only some exceptions
:perl6

    my $age = prompt 'your age?';
    enter-disco $age;
    CATCH {
        when X::Disco::TooYoung {
            # do something sensible
        }
        # all other exceptions are ignored.
    }

= Use cases

 * retry only on temporary errors
 * distinguish user errors from internal errors

= Backtraces

 * `$!.backtrace`
 * List of `Backtrace::Frame` objects
 * Each frame has file, line, reference to code object
 * Lots of filtering in default stringification

= Backtrace Excursion - Filtering
:perl6

    sub f {
        for 1..5 {
            die 'How deep?';
        }
    }
    try f;

    say $!.backtrace.Str;
    say $!.backtrace.full.Str;

= Backtrace Excursion - filtered output
:text

# say $!.backtrace.Str;
  in sub f at bt1.pl:3
  in block  at bt1.pl:6

= Backtrace Excursion - full output
:text

# say $!.backtrace.full.Str;
  in method throw at src/gen/CORE.setting:10033
  in sub die at src/gen/CORE.setting:638
  in sub die at src/gen/CORE.setting:635
  in block  at bt1.pl:3
  in block  at src/gen/CORE.setting:6774
  in method reify at src/gen/CORE.setting:6751
  in block  at src/gen/CORE.setting:6669
  in method reify at src/gen/CORE.setting:6641
  in method gimme at src/gen/CORE.setting:7102
  in method eager at src/gen/CORE.setting:7078
  in sub f at bt1.pl:2
  in code  at bt1.pl:6
  in block  at bt1.pl:9
  in any  at bt1.pl:1

= Backtrace Excursion - What's in there

* `for`-loop implemented in terms of `List.map`
* Lists are lazy, and list elements on demand
* Implementation details from the setting
* Entry point into the program (compilation unit)

= Backtrace Excursion - Filtering

* Routines can be statically marked as being hidden from backtrace
* Routines from the setting are generally ignored
* Static and dynamic call chain are intersected

= Writing our own Filter

* Backtraces are great for developers
* but the poor user doesn't care about our call stack
* so let's try to show something more useful

= Preparations
:perl6

multi sub trait_mod:<is>(Routine:D $r, :$user-facing!) {
    my role Described[$by] {
        method descr() { $by }
    }
    $r does Described[$user-facing];
}

= Give some subroutines user-facing descriptions
:perl6

sub save-state() {
    save-config;
}

# we want to show this one to the user
sub save-config() is user-facing('saving user config') {
    my $f = open :w, '/no/such/path';
}
try save-state;

= Filter the backtrace
:perl6

if $! {
     say "Error: ", $!.message();
     for $!.backtrace.list {
         if .code.^can('descr') {
             say "  while ", .code.descr;
         }
     }
 }

= Example output
:text

Error: Unable to open filehandle from path '/no/such/path': ⏎
	No such file or directory
  while saving user config

= Principles of good exception design

* Carry all potentially interesting information in the exception
* Example: code objects, not just names of routines
* When displaying the exception, filter to your heart's desire
* (You could implement Carp::croak this way)

= Some missing bits

* Translations of exceptions
* User-defined warnings
* Logging?
* Not all errors from the compiler and the setting are of the proper type
